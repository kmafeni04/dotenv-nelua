-- Original work: veeponym, https://gist.github.com/veeponym/6a8f7ba661032ddce1e941095a998a69
--[[
MIT License

Copyright (c) 2025 Leonard Mafeni

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
]]

require "io"
require "os"
require "hashmap"

---### Dotenv
--- Record containing all your env variables
---`
local Dotenv = @record{
  vars: hashmap(string, string)
}
---`

local function trim_space(s: string): string
  local s_match, s_seq = s:match("^%s*(.-)%s*$")
  if not s_match then
    return s
  end
  return s_seq[1]
end

-- Reads a file
-- Returns its contents as a string or and empty string with an error string
local function read_file(filename: string): (string, string)
  local file = io.open(filename, "r")
  local file, err = io.open(filename, "r")
  if err ~= "" then
    return "", "Failed to read '" .. filename .. "': " .. err
  end
  local content = file:read("*a")
  file:close()
  return content, ""
end

-- Parses the `.env` file's content
local function parse_env(content: string): hashmap(string, string)
  local items: hashmap(string, string)
  for line in content:gmatch("[^\r\n]+") do
    -- Trim any leading or trailing whitespace from the line
    line = trim_space(line)
    -- Ignore empty lines or lines starting with #
    if line ~= "" and line:sub(1, 1) ~= "#" then
      -- Split the line by the first = sign
      local _, val_seq = line:match("([^=]+)=(.*)")
      local key, value = val_seq[1], val_seq[2]
      -- Trim any leading or trailing whitespace from the key and value
      key = trim_space(key)
      value = trim_space(value)
      -- Check if the value is surrounded by double quotes
      if value:sub(1, 1) == '"' and value:sub(-1, -1) == '"' then
        -- Remove the quotes and unescape any escaped characters
        value = value:sub(2, -2):gsub('\\"', '"')
      end
      -- Check if the value is surrounded by single quotes
      if value:sub(1, 1) == "'" and value:sub(-1, -1) == "'" then
        -- Remove the quotes
        value = value:sub(2, -2)
      end
      -- Store the key-value pair in the table
      items[key] = value
    end
  end
  return items
end

---### Dotenv.load
--[[-
Loads the specified file or a `.env` file\
Returns the env map and an error string\
If no error occurs, the string is empty
-]]
---`
function Dotenv.load(filename: facultative(string)): (Dotenv, string)
---`
  ## if filename.type.is_niltype then
    local filename = ".env"
  ## end
  assert(filename ~= "", "If filename is passed, it can not be an empty string")
  local dotenv: Dotenv
  local content, err = read_file(filename)
  if err ~= "" then
    return dotenv, err
  end
  local items = parse_env(content)
  for key, value in pairs(items) do
    if not dotenv.vars:has(key) then
      dotenv.vars[key] = value
    end
  end
  return dotenv, ""
end

---### Dotenv:get
--[[-
Trys to get the environment variable from os.getenv then tries the `.env` file\
Returns the value of that variable or an empty string
-]]
---`
function Dotenv:get(env: string, default: string): string
---`
  if self.vars:has(env) then
    return self.vars[env]
  end
  local val = os.getenv(env)
  if default ~= "" and val == "" then
    val = default
  end
  return val
end

return Dotenv
